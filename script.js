
// Ideas: 
// allow user to change number of cells numbered zero for rows 2 to 9
// Create truly "Generate Random Board" button
// Allow user to create their own board. (Note: user should only be allowed to enter a NUMBER in each cell)
// red color tils before submission
// green if correct
// yellow if wrong?

// ########################################################################

// Helpful link: https://stackoverflow.com/questions/50643302/addeventlistener-on-a-queryselectorall-with-classlist
hundredBoards = [[[0, 0, 0, 0, 8, 9, 5, 3, 1], [9, 8, 0, 0, 1, 0, 4, 7, 0], [0, 0, 0, 0, 2, 7, 6, 9, 8], [0, 0, 0, 0, 6, 0, 3, 0, 5], [0, 6, 9, 3, 0, 2, 0, 0, 4], [0, 5, 0, 7, 4, 8, 9, 0, 0], [0, 0, 0, 8, 7, 0, 0, 0, 0], [6, 7, 0, 1, 0, 5, 2, 4, 0], [5, 0, 0, 0, 0, 0, 0, 6, 0]], [[2, 1, 0, 0, 0, 0, 6, 8, 7], [3, 9, 0, 7, 0, 8, 0, 0, 2], [0, 0, 6, 0, 0, 1, 0, 9, 3], [5, 7, 0, 6, 0, 0, 9, 0, 4], [0, 3, 0, 5, 8, 7, 0, 0, 6], [0, 2, 1, 0, 0, 0, 8, 0, 0], [1, 4, 0, 0, 0, 0, 0, 6, 0], [0, 5, 7, 8, 0, 6, 0, 4, 1], [0, 0, 0, 1, 0, 0, 0, 5, 9]], [[5, 7, 0, 0, 4, 6, 0, 1, 0], [0, 0, 4, 3, 0, 0, 5, 0, 7], [3, 0, 1, 5, 8, 0, 0, 0, 0], [0, 8, 0, 0, 5, 4, 6, 0, 1], [0, 4, 0, 0, 0, 0, 9, 0, 8], [6, 0, 0, 9, 3, 8, 0, 0, 0], [1, 3, 6, 8, 9, 5, 4, 7, 0], [0, 0, 9, 4, 7, 0, 0, 0, 3], [0, 0, 0, 0, 6, 0, 8, 9, 0]], [[0, 7, 2, 6, 0, 0, 9, 0, 0], [5, 0, 8, 0, 7, 1, 3, 6, 4], [4, 3, 0, 0, 9, 5, 7, 0, 0], [7, 0, 4, 0, 0, 0, 0, 1, 0], [0, 8, 5, 0, 0, 0, 6, 4, 0], [0, 2, 1, 4, 6, 7, 0, 0, 0], [2, 0, 7, 3, 0, 0, 1, 0, 0], [6, 0, 0, 0, 0, 8, 0, 7, 2], [0, 1, 9, 7, 4, 2, 0, 3, 0]], [[0, 2, 1, 0, 0, 0, 0, 3, 9], [0, 0, 6, 3, 0, 0, 0, 2, 0], [9, 0, 5, 2, 1, 4, 0, 0, 8], [3, 1, 0, 0, 8, 2, 9, 5, 0], [0, 0, 0, 0, 0, 3, 8, 6, 2], [2, 6, 0, 0, 9, 0, 0, 0, 3], [1, 0, 0, 9, 7, 0, 0, 4, 0], [6, 9, 7, 0, 0, 0, 0, 8, 0], [5, 4, 3, 0, 2, 0, 0, 9, 6]], [[0, 6, 5, 3, 0, 4, 9, 8, 0], [3, 7, 4, 8, 1, 9, 0, 0, 6], [8, 0, 9, 0, 6, 5, 0, 0, 7], [6, 4, 2, 0, 9, 3, 0, 1, 5], [0, 0, 0, 0, 4, 0, 0, 0, 9], [0, 9, 0, 1, 5, 0, 0, 0, 4], [0, 2, 1, 4, 3, 0, 0, 0, 0], [4, 3, 6, 9, 8, 0, 0, 5, 2], [0, 8, 7, 0, 2, 1, 6, 0, 0]], [[0, 1, 5, 0, 0, 0, 2, 0, 0], [7, 8, 0, 0, 0, 0, 5, 9, 1], [0, 0, 2, 0, 0, 0, 4, 7, 8], [0, 2, 0, 0, 0, 8, 6, 0, 0], [0, 5, 7, 0, 4, 3, 0, 0, 0], [0, 0, 6, 9, 0, 1, 0, 8, 0], [2, 6, 0, 0, 0, 0, 0, 4, 7], [5, 0, 0, 0, 7, 4, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]], [[1, 0, 0, 0, 0, 8, 0, 2, 9], [4, 0, 0, 7, 1, 0, 6, 8, 0], [0, 8, 3, 9, 0, 0, 1, 0, 7], [0, 4, 2, 5, 3, 0, 9, 6, 0], [0, 1, 5, 0, 9, 6, 7, 4, 0], [9, 0, 8, 0, 0, 4, 3, 1, 0], [8, 0, 1, 0, 2, 0, 0, 0, 0], [2, 9, 6, 0, 0, 0, 8, 0, 0], [5, 7, 4, 0, 8, 3, 0, 9, 6]], [[0, 3, 4, 0, 0, 0, 6, 0, 5], [0, 9, 0, 5, 0, 0, 7, 0, 0], [0, 2, 5, 0, 0, 0, 0, 9, 1], [4, 8, 3, 9, 0, 1, 0, 0, 2], [0, 7, 0, 0, 8, 0, 1, 0, 9], [0, 6, 9, 2, 7, 0, 0, 8, 0], [9, 5, 6, 0, 4, 0, 0, 0, 0], [0, 4, 0, 8, 0, 0, 0, 0, 0], [0, 0, 8, 6, 0, 9, 0, 4, 7]], [[0, 0, 0, 6, 2, 0, 0, 8, 0], [8, 5, 0, 0, 3, 0, 0, 2, 0], [2, 0, 9, 0, 8, 0, 7, 3, 0], [1, 9, 3, 0, 6, 2, 0, 5, 0], [0, 7, 8, 0, 0, 0, 2, 6, 0], [6, 4, 0, 7, 0, 0, 0, 1, 9], [0, 0, 0, 0, 9, 0, 6, 0, 0], [9, 2, 1, 0, 4, 0, 0, 7, 0], [0, 0, 6, 3, 0, 0, 0, 0, 0]], [[5, 0, 6, 0, 0, 9, 0, 3, 1], [4, 9, 0, 7, 0, 0, 6, 0, 0], [3, 0, 0, 6, 0, 8, 0, 4, 0], [0, 0, 0, 1, 0, 3, 8, 0, 0], [7, 0, 8, 0, 0, 0, 0, 0, 3], [2, 3, 0, 8, 7, 5, 9, 0, 0], [0, 2, 0, 5, 1, 7, 4, 8, 6], [8, 6, 4, 0, 0, 2, 0, 0, 7], [0, 7, 0, 4, 0, 0, 0, 0, 2]], [[0, 0, 0, 0, 7, 1, 8, 0, 3], [0, 0, 3, 9, 5, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 6, 0, 9], [0, 3, 0, 0, 0, 0, 0, 6, 7], [0, 0, 5, 0, 0, 2, 3, 1, 4], [0, 0, 0, 0, 1, 0, 0, 0, 5], [9, 0, 6, 0, 2, 0, 0, 3, 8], [0, 4, 0, 8, 0, 5, 7, 0, 6], [0, 0, 8, 0, 9, 0, 4, 2, 1]], [[0, 3, 0, 2, 4, 0, 0, 9, 0], [8, 0, 5, 1, 3, 0, 6, 0, 0], [0, 4, 0, 5, 0, 8, 7, 3, 0], [0, 0, 6, 8, 5, 0, 4, 0, 7], [0, 5, 0, 0, 1, 0, 0, 0, 6], [0, 0, 0, 6, 2, 9, 0, 0, 0], [5, 0, 0, 3, 0, 0, 2, 0, 0], [2, 7, 4, 0, 6, 5, 0, 8, 0], [1, 8, 3, 4, 7, 0, 0, 6, 0]], [[9, 1, 0, 8, 0, 0, 0, 4, 6], [0, 0, 0, 6, 0, 0, 1, 0, 0], [0, 0, 4, 0, 0, 1, 0, 0, 0], [0, 0, 6, 0, 9, 4, 0, 8, 0], [0, 0, 8, 2, 0, 0, 0, 9, 3], [0, 4, 0, 0, 8, 0, 5, 0, 0], [7, 8, 0, 0, 3, 0, 0, 0, 4], [0, 0, 0, 0, 0, 9, 8, 2, 7], [0, 0, 1, 0, 2, 0, 0, 3, 5]], [[0, 0, 7, 0, 0, 5, 1, 4, 8], [5, 0, 0, 0, 8, 0, 0, 0, 7], [0, 1, 0, 3, 7, 0, 0, 5, 6], [1, 8, 0, 0, 5, 0, 6, 2, 0], [2, 6, 0, 0, 9, 0, 7, 3, 0], [3, 7, 0, 0, 0, 2, 0, 1, 9], [7, 0, 2, 4, 1, 6, 9, 8, 0], [8, 9, 0, 5, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 5, 0, 2]], [[0, 0, 6, 1, 8, 0, 0, 5, 3], [0, 1, 4, 0, 0, 5, 7, 6, 0], [3, 0, 0, 7, 0, 6, 0, 0, 8], [4, 0, 0, 3, 0, 0, 0, 0, 6], [0, 0, 9, 0, 0, 7, 3, 0, 0], [0, 0, 0, 0, 6, 9, 8, 0, 0], [9, 0, 3, 4, 0, 2, 5, 8, 0], [0, 4, 0, 0, 1, 8, 0, 3, 9], [1, 5, 0, 0, 9, 3, 4, 2, 0]], [[0, 4, 2, 7, 0, 9, 8, 0, 6], [0, 9, 0, 1, 6, 0, 0, 0, 0], [1, 0, 0, 3, 0, 0, 9, 0, 5], [2, 1, 4, 0, 0, 3, 7, 0, 8], [0, 0, 0, 0, 0, 0, 0, 5, 9], [5, 3, 0, 0, 8, 0, 0, 0, 0], [0, 0, 7, 4, 0, 6, 0, 9, 3], [9, 2, 0, 8, 0, 5, 0, 4, 0], [4, 0, 1, 9, 3, 0, 0, 0, 0]], [[0, 0, 8, 2, 6, 9, 0, 3, 0], [6, 2, 9, 5, 3, 0, 1, 0, 8], [3, 0, 7, 1, 4, 0, 0, 0, 0], [8, 6, 1, 0, 9, 0, 0, 0, 0], [0, 0, 2, 0, 7, 5, 0, 0, 0], [7, 0, 5, 0, 8, 0, 0, 0, 2], [1, 0, 0, 0, 2, 3, 8, 0, 4], [0, 0, 4, 9, 1, 6, 7, 0, 3], [0, 0, 0, 8, 5, 4, 0, 0, 0]], [[0, 0, 6, 0, 0, 8, 5, 1, 0], [0, 0, 7, 0, 2, 3, 0, 0, 0], [0, 9, 4, 7, 1, 5, 0, 0, 0], [2, 0, 8, 5, 0, 0, 0, 6, 3], [1, 6, 3, 8, 4, 2, 9, 0, 0], [9, 7, 5, 0, 6, 1, 2, 4, 8], [7, 0, 1, 0, 0, 6, 4, 5, 0], [0, 5, 0, 1, 0, 0, 0, 0, 2], [0, 0, 2, 0, 0, 4, 7, 3, 1]], [[6, 0, 7, 0, 0, 9, 0, 0, 0], [0, 0, 3, 5, 0, 7, 0, 0, 0], [2, 0, 0, 0, 8, 0, 0, 0, 0], [0, 8, 1, 6, 9, 5, 2, 0, 4], [9, 0, 0, 2, 0, 0, 8, 7, 0], [0, 2, 0, 0, 0, 0, 6, 9, 0], [0, 7, 0, 9, 4, 0, 3, 0, 2], [4, 9, 6, 3, 0, 2, 7, 5, 0], [0, 3, 2, 0, 5, 8, 9, 0, 6]], [[5, 0, 4, 7, 6, 0, 0, 3, 8], [1, 6, 0, 0, 0, 0, 0, 4, 0], [8, 2, 0, 0, 9, 0, 0, 7, 1], [0, 7, 8, 5, 0, 2, 4, 0, 9], [2, 3, 5, 1, 0, 0, 0, 8, 0], [9, 4, 0, 8, 0, 6, 0, 0, 0], [7, 0, 0, 9, 5, 3, 0, 6, 4], [0, 0, 6, 0, 8, 0, 0, 0, 0], [0, 5, 0, 0, 1, 0, 8, 0, 0]], [[4, 7, 8, 5, 0, 9, 6, 0, 0], [0, 3, 6, 8, 0, 0, 5, 0, 9], [0, 0, 0, 6, 0, 3, 0, 0, 0], [5, 0, 0, 0, 0, 4, 0, 0, 0], [6, 4, 3, 0, 0, 2, 9, 5, 1], [8, 0, 0, 9, 0, 0, 0, 6, 0], [0, 0, 4, 2, 0, 5, 1, 0, 6], [0, 5, 2, 0, 9, 0, 0, 0, 0], [9, 0, 1, 0, 0, 8, 0, 0, 0]], [[2, 0, 7, 3, 6, 0, 0, 5, 0], [0, 8, 1, 2, 0, 9, 0, 0, 0], [0, 4, 6, 5, 1, 0, 0, 2, 7], [4, 0, 2, 0, 3, 0, 7, 9, 0], [0, 0, 5, 4, 2, 6, 0, 8, 0], [8, 0, 0, 0, 5, 0, 6, 0, 2], [6, 0, 9, 0, 0, 3, 5, 7, 0], [0, 0, 4, 7, 0, 0, 0, 0, 0], [7, 0, 0, 0, 9, 0, 0, 1, 0]], [[0, 0, 0, 2, 0, 0, 0, 4, 9], [0, 3, 0, 4, 0, 0, 7, 5, 8], [6, 0, 0, 5, 7, 8, 1, 0, 0], [0, 7, 0, 0, 2, 1, 4, 8, 6], [2, 0, 0, 8, 4, 0, 0, 3, 7], [0, 0, 0, 3, 0, 0, 2, 0, 1], [0, 5, 1, 0, 9, 2, 0, 0, 4], [8, 4, 0, 1, 0, 0, 0, 6, 2], [0, 2, 0, 0, 0, 0, 3, 1, 5]], [[0, 0, 0, 3, 0, 0, 2, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 6, 4, 0], [0, 9, 0, 2, 0, 3, 0, 0, 0], [0, 8, 0, 0, 1, 9, 0, 3, 0], [0, 3, 0, 0, 4, 0, 0, 9, 7], [9, 0, 0, 5, 3, 7, 8, 2, 4], [8, 0, 0, 1, 0, 0, 3, 7, 5], [0, 0, 5, 0, 0, 2, 0, 6, 1]], [[0, 5, 0, 7, 3, 0, 2, 0, 0], [8, 0, 3, 0, 0, 2, 4, 0, 5], [2, 9, 1, 0, 0, 4, 0, 3, 7], [0, 2, 0, 4, 0, 6, 0, 5, 0], [0, 0, 0, 0, 0, 0, 6, 0, 4], [6, 0, 0, 0, 0, 0, 0, 7, 2], [0, 1, 0, 0, 2, 0, 0, 4, 3], [0, 6, 2, 0, 0, 0, 0, 0, 0], [5, 0, 4, 0, 8, 7, 9, 0, 6]], [[0, 0, 9, 0, 0, 0, 2, 0, 3], [0, 0, 0, 0, 9, 0, 0, 0, 1], [0, 0, 0, 3, 5, 0, 0, 9, 0], [0, 0, 0, 7, 8, 1, 3, 0, 0], [0, 3, 4, 0, 2, 6, 0, 8, 0], [0, 1, 0, 0, 4, 0, 6, 0, 9], [0, 0, 3, 8, 6, 7, 0, 1, 4], [4, 5, 1, 2, 3, 9, 7, 6, 0], [8, 0, 0, 4, 0, 0, 0, 3, 0]], [[0, 0, 7, 6, 0, 0, 4, 9, 8], [6, 0, 0, 4, 0, 9, 0, 0, 0], [0, 8, 9, 3, 2, 0, 0, 5, 0], [1, 0, 6, 0, 7, 0, 2, 3, 0], [0, 0, 0, 1, 0, 6, 0, 0, 0], [8, 7, 4, 0, 5, 3, 1, 6, 9], [9, 4, 1, 7, 3, 8, 0, 0, 6], [0, 0, 8, 5, 0, 2, 9, 1, 0], [0, 0, 2, 0, 0, 1, 7, 8, 0]], [[0, 0, 0, 4, 0, 0, 9, 0, 0], [0, 8, 2, 0, 5, 0, 0, 3, 0], [7, 0, 0, 0, 8, 0, 6, 5, 0], [3, 4, 0, 0, 2, 8, 0, 1, 0], [5, 1, 0, 0, 4, 3, 8, 2, 7], [8, 2, 7, 0, 1, 5, 0, 4, 0], [4, 6, 0, 0, 0, 0, 0, 0, 0], [0, 7, 3, 0, 0, 0, 4, 6, 0], [0, 0, 0, 5, 0, 0, 2, 7, 0]], [[0, 0, 0, 0, 1, 0, 9, 2, 0], [6, 0, 1, 2, 3, 0, 4, 0, 0], [0, 0, 0, 0, 8, 4, 6, 7, 1], [2, 3, 0, 8, 0, 5, 7, 1, 0], [0, 8, 0, 0, 4, 7, 2, 0, 6], [7, 0, 4, 0, 0, 2, 5, 8, 9], [3, 0, 0, 0, 2, 8, 1, 0, 0], [8, 9, 0, 0, 5, 0, 3, 6, 0], [0, 4, 5, 0, 0, 0, 0, 9, 2]], [[5, 4, 3, 8, 0, 0, 2, 9, 0], [7, 8, 0, 6, 2, 0, 0, 5, 0], [0, 0, 2, 4, 3, 5, 1, 0, 0], [4, 0, 0, 0, 7, 0, 9, 6, 0], [6, 1, 9, 2, 5, 0, 0, 8, 3], [8, 0, 7, 0, 0, 0, 5, 0, 2], [1, 0, 0, 9, 0, 0, 8, 0, 5], [3, 5, 8, 7, 0, 0, 4, 2, 0], [0, 9, 4, 0, 8, 0, 6, 0, 7]], [[9, 3, 0, 7, 8, 0, 6, 0, 0], [4, 8, 0, 0, 5, 6, 9, 3, 2], [0, 0, 1, 2, 0, 9, 0, 0, 0], [0, 0, 3, 8, 4, 0, 0, 0, 5], [2, 6, 5, 3, 0, 7, 0, 4, 0], [0, 0, 8, 5, 6, 0, 7, 9, 3], [0, 0, 0, 9, 7, 0, 5, 1, 4], [0, 1, 0, 6, 0, 0, 8, 7, 0], [0, 7, 0, 0, 1, 0, 3, 0, 0]], [[7, 5, 4, 0, 9, 3, 0, 6, 0], [8, 6, 2, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 5, 0], [2, 0, 0, 9, 0, 5, 3, 0, 1], [0, 8, 0, 7, 0, 0, 0, 9, 5], [0, 9, 5, 0, 0, 0, 0, 7, 0], [0, 3, 0, 2, 0, 8, 6, 4, 0], [6, 0, 7, 3, 5, 0, 1, 0, 0], [1, 2, 8, 0, 0, 0, 5, 0, 9]], [[9, 4, 3, 0, 0, 5, 2, 1, 6], [6, 0, 2, 0, 3, 9, 7, 0, 0], [5, 0, 0, 1, 2, 6, 3, 0, 0], [4, 0, 6, 0, 9, 8, 5, 0, 0], [1, 0, 5, 0, 0, 0, 9, 3, 0], [0, 0, 0, 7, 5, 0, 6, 2, 4], [0, 0, 1, 6, 0, 3, 8, 9, 0], [3, 6, 0, 0, 8, 0, 0, 5, 0], [7, 9, 0, 5, 0, 0, 0, 0, 3]], [[0, 0, 0, 4, 0, 0, 3, 5, 7], [3, 5, 7, 0, 0, 0, 0, 9, 4], [0, 9, 4, 0, 0, 0, 0, 0, 2], [4, 6, 8, 9, 1, 0, 2, 0, 5], [0, 3, 5, 8, 0, 4, 7, 0, 0], [7, 1, 9, 5, 0, 0, 4, 0, 8], [0, 0, 0, 6, 4, 9, 0, 0, 1], [9, 0, 6, 0, 0, 0, 0, 0, 0], [0, 7, 1, 3, 2, 0, 9, 0, 0]], [[0, 9, 4, 0, 0, 0, 8, 0, 5], [0, 1, 6, 0, 8, 0, 9, 4, 7], [0, 8, 2, 0, 0, 0, 1, 0, 3], [0, 5, 0, 0, 0, 9, 3, 1, 2], [2, 3, 1, 4, 5, 8, 0, 0, 6], [0, 7, 9, 0, 3, 0, 5, 0, 4], [0, 6, 7, 0, 2, 3, 0, 5, 0], [0, 0, 5, 0, 6, 0, 0, 3, 0], [0, 0, 3, 0, 0, 0, 6, 0, 1]], [[2, 9, 0, 7, 0, 1, 8, 5, 3], [0, 3, 5, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 9], [3, 4, 2, 9, 1, 0, 0, 8, 5], [9, 0, 0, 0, 5, 8, 3, 2, 4], [0, 0, 8, 0, 4, 2, 9, 7, 0], [0, 2, 0, 4, 0, 0, 1, 6, 8], [0, 8, 0, 0, 2, 0, 0, 9, 7], [0, 0, 9, 0, 0, 6, 0, 3, 2]], [[1, 5, 0, 0, 7, 0, 0, 4, 0], [0, 7, 2, 6, 3, 0, 0, 0, 0], [0, 3, 6, 0, 5, 0, 0, 9, 7], [0, 2, 0, 4, 6, 0, 0, 0, 8], [3, 0, 0, 9, 2, 0, 4, 0, 0], [7, 0, 4, 0, 8, 0, 0, 0, 0], [2, 0, 7, 3, 0, 6, 0, 0, 9], [8, 9, 5, 7, 4, 0, 0, 6, 1], [6, 0, 0, 0, 0, 0, 0, 2, 0]], [[3, 0, 6, 8, 0, 0, 2, 0, 7], [9, 0, 0, 0, 0, 5, 3, 0, 0], [0, 7, 5, 4, 0, 6, 9, 0, 0], [1, 9, 0, 2, 5, 8, 0, 7, 0], [6, 3, 0, 9, 0, 0, 0, 8, 0], [5, 0, 0, 0, 6, 7, 0, 0, 9], [4, 0, 3, 0, 0, 9, 7, 2, 0], [8, 5, 0, 6, 0, 0, 4, 3, 1], [7, 6, 2, 0, 4, 3, 8, 9, 5]], [[0, 8, 2, 9, 0, 1, 7, 4, 0], [0, 9, 1, 4, 0, 0, 2, 8, 0], [5, 4, 0, 8, 6, 2, 1, 0, 3], [0, 0, 5, 0, 4, 6, 3, 0, 0], [4, 0, 6, 1, 0, 3, 0, 7, 0], [8, 1, 3, 0, 9, 5, 0, 0, 0], [1, 0, 0, 6, 7, 4, 8, 0, 2], [7, 0, 0, 3, 2, 8, 9, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 7]], [[9, 4, 2, 0, 7, 0, 0, 1, 6], [1, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 8, 1, 5, 0, 0, 9, 2], [0, 0, 0, 0, 0, 0, 0, 6, 0], [6, 0, 0, 2, 9, 7, 3, 0, 0], [0, 3, 0, 0, 1, 0, 9, 2, 0], [5, 8, 0, 4, 0, 9, 2, 0, 0], [0, 6, 0, 7, 2, 3, 8, 0, 1], [7, 0, 0, 5, 0, 0, 6, 0, 0]], [[3, 0, 4, 0, 1, 7, 0, 0, 0], [1, 8, 0, 0, 5, 9, 0, 0, 2], [0, 0, 9, 2, 3, 4, 0, 0, 8], [8, 0, 0, 7, 6, 5, 0, 2, 0], [2, 0, 0, 0, 8, 1, 0, 6, 0], [6, 7, 5, 0, 0, 0, 1, 0, 0], [7, 1, 6, 5, 9, 0, 8, 0, 3], [4, 0, 0, 0, 0, 0, 0, 9, 5], [0, 0, 2, 0, 0, 0, 6, 0, 0]], [[9, 7, 1, 0, 6, 0, 0, 0, 8], [8, 0, 0, 0, 0, 1, 6, 3, 0], [0, 6, 0, 0, 0, 2, 0, 0, 0], [7, 2, 9, 6, 1, 0, 3, 0, 0], [0, 0, 8, 7, 2, 0, 1, 4, 6], [6, 1, 4, 5, 3, 0, 2, 9, 0], [0, 4, 0, 0, 8, 0, 0, 0, 1], [0, 9, 0, 0, 4, 5, 8, 0, 2], [2, 0, 0, 1, 9, 0, 4, 5, 0]], [[7, 9, 3, 0, 2, 1, 4, 0, 0], [0, 4, 5, 9, 0, 0, 0, 0, 2], [2, 0, 1, 4, 6, 5, 9, 0, 7], [9, 0, 0, 0, 8, 7, 1, 2, 0], [8, 3, 7, 1, 4, 2, 5, 0, 0], [4, 1, 0, 5, 9, 0, 3, 7, 0], [0, 0, 8, 0, 5, 0, 6, 0, 0], [0, 0, 4, 6, 0, 9, 0, 8, 1], [0, 6, 9, 0, 1, 8, 2, 4, 0]], [[0, 7, 6, 1, 0, 0, 0, 9, 2], [8, 0, 2, 3, 7, 6, 1, 5, 4], [1, 5, 0, 0, 0, 0, 0, 7, 0], [6, 0, 7, 4, 0, 5, 0, 3, 0], [4, 8, 5, 0, 3, 0, 6, 1, 0], [0, 0, 9, 6, 1, 7, 0, 8, 5], [0, 4, 0, 0, 2, 0, 0, 6, 3], [5, 0, 0, 9, 6, 3, 7, 4, 1], [0, 0, 0, 7, 4, 1, 0, 0, 0]], [[9, 5, 7, 4, 0, 0, 6, 0, 2], [1, 0, 4, 0, 6, 0, 9, 5, 7], [6, 0, 2, 7, 9, 5, 1, 0, 0], [0, 1, 0, 0, 2, 0, 7, 9, 8], [0, 0, 0, 8, 7, 0, 4, 0, 3], [0, 0, 0, 3, 4, 1, 0, 6, 0], [0, 7, 1, 6, 0, 0, 0, 2, 0], [0, 0, 0, 1, 8, 0, 0, 4, 6], [3, 0, 0, 9, 5, 0, 8, 7, 0]], [[0, 9, 0, 0, 6, 7, 0, 4, 0], [0, 2, 8, 0, 0, 9, 0, 0, 6], [0, 0, 0, 4, 0, 0, 0, 5, 3], [9, 0, 1, 0, 0, 6, 0, 2, 5], [7, 6, 0, 0, 5, 8, 0, 9, 1], [0, 0, 5, 0, 0, 0, 6, 7, 0], [0, 4, 0, 0, 9, 0, 0, 3, 0], [0, 1, 0, 0, 2, 4, 0, 8, 0], [8, 5, 9, 0, 7, 0, 4, 0, 2]], [[6, 7, 0, 0, 0, 8, 0, 0, 0], [0, 4, 0, 0, 0, 0, 9, 8, 0], [0, 0, 0, 0, 0, 0, 1, 0, 6], [0, 9, 0, 0, 0, 2, 5, 0, 0], [0, 1, 5, 0, 3, 0, 0, 0, 7], [7, 0, 0, 8, 5, 0, 3, 9, 0], [1, 0, 8, 9, 4, 0, 0, 0, 0], [0, 3, 0, 1, 8, 0, 4, 5, 9], [0, 0, 4, 0, 0, 0, 0, 0, 0]], [[0, 3, 4, 0, 0, 5, 0, 0, 7], [5, 1, 2, 9, 0, 0, 4, 3, 0], [0, 0, 9, 0, 3, 0, 0, 1, 0], [2, 5, 3, 0, 0, 0, 8, 6, 4], [0, 0, 0, 8, 0, 0, 3, 5, 0], [0, 0, 0, 3, 5, 2, 0, 0, 0], [3, 2, 0, 5, 9, 1, 7, 0, 0], [1, 0, 5, 0, 4, 0, 0, 2, 0], [8, 4, 0, 6, 2, 0, 5, 9, 1]], [[0, 0, 0, 3, 0, 0, 0, 0, 7], [0, 0, 0, 5, 6, 7, 0, 8, 1], [0, 6, 7, 0, 0, 1, 0, 9, 2], [0, 4, 6, 0, 0, 0, 0, 0, 9], [2, 5, 0, 7, 4, 6, 1, 3, 8], [0, 0, 0, 2, 0, 0, 7, 0, 6], [6, 1, 4, 0, 2, 0, 9, 0, 0], [0, 7, 0, 0, 0, 0, 8, 2, 0], [8, 2, 3, 0, 7, 5, 0, 0, 0]], [[0, 6, 0, 9, 7, 8, 0, 0, 1], [9, 0, 0, 4, 0, 0, 3, 0, 0], [0, 0, 1, 0, 2, 0, 9, 0, 7], [0, 0, 4, 5, 0, 2, 0, 0, 0], [5, 2, 3, 0, 9, 7, 8, 1, 0], [0, 0, 0, 8, 0, 0, 0, 2, 0], [0, 0, 0, 7, 8, 4, 1, 3, 0], [1, 0, 5, 2, 0, 9, 0, 4, 0], [7, 0, 0, 1, 0, 0, 2, 9, 6]], [[2, 0, 0, 4, 5, 0, 0, 0, 0], [0, 4, 3, 0, 8, 0, 0, 0, 9], [8, 1, 6, 0, 2, 0, 0, 3, 4], [4, 0, 0, 6, 0, 2, 9, 5, 0], [9, 7, 0, 3, 0, 0, 1, 0, 0], [0, 6, 2, 0, 0, 5, 0, 8, 3], [0, 0, 0, 0, 7, 4, 3, 0, 8], [0, 5, 4, 0, 0, 0, 6, 0, 0], [3, 0, 1, 0, 6, 9, 7, 4, 5]], [[0, 0, 4, 0, 0, 0, 8, 0, 0], [0, 0, 9, 0, 8, 0, 0, 0, 0], [0, 8, 6, 0, 0, 2, 0, 0, 7], [3, 6, 0, 0, 0, 0, 9, 7, 0], [0, 0, 7, 1, 6, 3, 0, 0, 5], [5, 0, 2, 7, 0, 8, 6, 1, 3], [4, 1, 0, 5, 2, 0, 0, 8, 0], [6, 7, 8, 3, 1, 0, 0, 5, 9], [0, 2, 0, 0, 7, 0, 1, 3, 0]], [[0, 8, 9, 1, 0, 4, 0, 7, 6], [0, 7, 3, 0, 0, 9, 0, 0, 5], [0, 0, 4, 7, 0, 3, 0, 0, 2], [0, 0, 0, 0, 3, 7, 0, 0, 0], [0, 5, 7, 6, 9, 8, 1, 2, 0], [9, 6, 8, 2, 0, 0, 7, 5, 3], [7, 4, 5, 0, 0, 0, 2, 9, 0], [0, 3, 6, 0, 1, 2, 5, 4, 7], [1, 9, 2, 0, 7, 0, 6, 3, 8]], [[0, 0, 5, 0, 0, 6, 0, 0, 0], [9, 1, 8, 4, 5, 2, 0, 7, 0], [0, 0, 7, 0, 8, 0, 2, 0, 0], [0, 9, 6, 0, 1, 0, 3, 2, 5], [0, 4, 0, 5, 0, 0, 9, 0, 0], [5, 3, 0, 7, 0, 0, 0, 1, 8], [2, 0, 3, 6, 0, 8, 5, 4, 0], [1, 0, 4, 0, 3, 7, 0, 9, 0], [6, 0, 9, 0, 0, 5, 0, 3, 0]], [[0, 0, 0, 6, 0, 0, 9, 1, 0], [1, 0, 9, 0, 8, 0, 0, 0, 3], [6, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 8, 0, 1, 0, 3, 2], [8, 0, 1, 0, 2, 5, 0, 7, 0], [3, 0, 0, 7, 4, 0, 0, 0, 9], [2, 1, 0, 4, 5, 3, 7, 9, 0], [0, 0, 3, 0, 0, 0, 0, 0, 1], [0, 6, 7, 0, 1, 0, 0, 4, 0]], [[7, 5, 0, 0, 2, 1, 0, 8, 0], [0, 0, 6, 0, 5, 0, 1, 2, 0], [0, 0, 9, 6, 8, 0, 7, 0, 4], [0, 0, 0, 5, 1, 4, 0, 0, 0], [4, 0, 5, 2, 0, 9, 6, 7, 0], [9, 0, 0, 8, 0, 6, 0, 0, 5], [0, 0, 3, 7, 4, 0, 0, 0, 0], [5, 9, 1, 3, 0, 2, 8, 0, 7], [0, 0, 7, 1, 0, 5, 2, 0, 0]], [[9, 2, 4, 0, 0, 0, 3, 6, 0], [0, 0, 6, 2, 0, 4, 0, 0, 7], [5, 7, 0, 8, 0, 6, 9, 0, 0], [4, 3, 2, 0, 0, 7, 6, 0, 5], [0, 9, 7, 0, 6, 8, 4, 2, 3], [0, 0, 8, 3, 0, 2, 1, 7, 9], [0, 6, 3, 4, 0, 9, 0, 0, 1], [7, 0, 0, 1, 8, 0, 2, 0, 6], [0, 0, 5, 6, 2, 0, 0, 9, 0]], [[8, 6, 4, 0, 2, 3, 5, 9, 0], [0, 5, 0, 0, 6, 8, 2, 0, 0], [3, 0, 0, 7, 0, 0, 0, 8, 4], [0, 0, 0, 6, 0, 0, 9, 7, 0], [7, 0, 2, 0, 8, 4, 0, 0, 6], [0, 3, 0, 2, 9, 0, 8, 0, 5], [5, 4, 9, 8, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 4, 0, 9], [0, 7, 3, 0, 4, 0, 1, 6, 8]], [[0, 1, 0, 3, 4, 0, 6, 7, 0], [0, 0, 9, 2, 6, 0, 5, 0, 1], [6, 2, 0, 1, 5, 8, 4, 0, 0], [3, 7, 4, 8, 2, 6, 0, 5, 0], [0, 0, 5, 7, 3, 4, 2, 6, 0], [2, 0, 6, 9, 0, 5, 3, 0, 0], [7, 0, 0, 0, 0, 2, 9, 0, 4], [9, 0, 1, 6, 7, 0, 0, 2, 0], [0, 0, 0, 4, 9, 1, 0, 3, 6]], [[0, 1, 9, 4, 2, 7, 0, 3, 6], [4, 7, 2, 6, 0, 8, 1, 0, 0], [6, 8, 0, 0, 9, 1, 0, 0, 0], [0, 3, 6, 8, 5, 0, 0, 4, 1], [0, 0, 5, 0, 0, 2, 3, 6, 0], [1, 2, 0, 0, 6, 3, 9, 0, 0], [0, 6, 0, 3, 0, 0, 4, 1, 0], [0, 5, 0, 0, 1, 0, 6, 7, 0], [9, 0, 1, 2, 0, 0, 5, 8, 3]], [[0, 0, 0, 4, 0, 8, 0, 0, 2], [0, 0, 2, 6, 5, 0, 1, 8, 4], [0, 1, 4, 0, 0, 0, 0, 7, 6], [3, 2, 8, 9, 6, 5, 0, 1, 0], [0, 0, 0, 0, 4, 1, 2, 0, 0], [0, 4, 0, 0, 0, 0, 6, 5, 9], [2, 8, 1, 0, 0, 6, 0, 4, 5], [6, 0, 0, 0, 7, 4, 0, 2, 0], [4, 7, 5, 0, 0, 2, 9, 6, 3]], [[2, 5, 9, 3, 6, 0, 0, 0, 7], [0, 0, 1, 0, 4, 8, 9, 0, 0], [0, 0, 8, 5, 0, 9, 0, 0, 0], [9, 0, 0, 0, 1, 7, 5, 8, 4], [1, 6, 0, 4, 8, 0, 3, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0], [3, 9, 6, 1, 0, 4, 2, 5, 0], [7, 0, 4, 0, 0, 2, 0, 3, 9], [0, 8, 0, 9, 3, 6, 4, 7, 0]], [[4, 0, 5, 8, 0, 6, 7, 0, 9], [0, 0, 1, 9, 0, 7, 4, 5, 2], [7, 9, 0, 0, 5, 4, 0, 1, 0], [1, 4, 8, 0, 0, 3, 0, 2, 7], [0, 6, 0, 7, 0, 0, 0, 8, 4], [0, 7, 2, 0, 8, 1, 3, 9, 0], [8, 5, 4, 1, 6, 9, 0, 7, 0], [0, 0, 6, 3, 7, 0, 8, 0, 5], [2, 3, 7, 5, 4, 8, 9, 0, 0]], [[6, 1, 9, 4, 8, 0, 5, 0, 0], [5, 3, 2, 1, 6, 9, 0, 0, 0], [0, 4, 0, 3, 5, 0, 6, 9, 1], [0, 0, 1, 0, 0, 4, 0, 3, 8], [9, 0, 0, 8, 0, 0, 2, 0, 5], [0, 8, 0, 0, 2, 0, 9, 0, 6], [1, 2, 0, 9, 0, 8, 3, 0, 0], [4, 9, 0, 7, 0, 5, 1, 6, 0], [3, 7, 5, 0, 0, 6, 0, 8, 0]], [[0, 0, 3, 9, 0, 1, 0, 7, 4], [0, 7, 0, 8, 0, 0, 9, 0, 0], [9, 0, 1, 0, 7, 0, 0, 6, 0], [6, 4, 2, 0, 3, 8, 7, 0, 9], [0, 3, 8, 7, 1, 9, 6, 4, 0], [0, 0, 9, 6, 4, 2, 0, 0, 8], [0, 2, 6, 0, 0, 0, 4, 9, 0], [0, 0, 7, 0, 2, 6, 0, 8, 0], [1, 0, 5, 0, 9, 7, 0, 0, 6]], [[5, 8, 0, 3, 0, 0, 0, 2, 0], [2, 9, 1, 5, 0, 0, 0, 3, 0], [0, 6, 7, 0, 0, 0, 4, 0, 8], [4, 0, 6, 0, 9, 3, 8, 0, 0], [1, 0, 8, 4, 6, 5, 0, 0, 0], [7, 3, 0, 0, 0, 2, 0, 0, 0], [9, 7, 2, 8, 0, 1, 3, 0, 0], [0, 1, 5, 0, 0, 0, 0, 0, 7], [6, 4, 0, 9, 0, 7, 0, 0, 1]], [[0, 0, 2, 5, 0, 0, 0, 8, 9], [0, 1, 0, 7, 0, 0, 0, 4, 0], [0, 0, 7, 2, 4, 6, 0, 0, 0], [2, 0, 1, 9, 0, 0, 0, 7, 0], [0, 0, 9, 0, 7, 0, 0, 0, 0], [0, 8, 0, 1, 0, 0, 0, 0, 0], [9, 5, 8, 4, 6, 7, 3, 1, 0], [6, 7, 0, 3, 1, 0, 0, 9, 5], [1, 2, 0, 0, 9, 5, 4, 0, 7]], [[4, 0, 0, 0, 0, 9, 3, 0, 8], [6, 9, 5, 0, 1, 3, 2, 0, 0], [8, 3, 0, 0, 7, 2, 0, 5, 6], [9, 1, 0, 3, 0, 7, 5, 0, 2], [2, 5, 0, 9, 6, 0, 0, 0, 3], [3, 7, 0, 2, 4, 0, 0, 6, 9], [5, 0, 2, 0, 9, 0, 0, 0, 7], [0, 0, 0, 7, 3, 4, 0, 2, 5], [7, 0, 0, 0, 0, 6, 0, 9, 0]], [[3, 4, 0, 2, 8, 9, 0, 0, 6], [9, 8, 2, 1, 0, 0, 5, 4, 3], [6, 0, 1, 0, 0, 0, 2, 0, 9], [0, 0, 4, 8, 9, 0, 7, 6, 0], [1, 0, 0, 7, 6, 0, 0, 3, 0], [0, 6, 0, 4, 3, 0, 0, 0, 0], [4, 5, 6, 3, 0, 0, 0, 1, 7], [8, 0, 3, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 4, 3, 0, 0]], [[7, 3, 5, 9, 0, 8, 2, 0, 4], [2, 0, 6, 0, 0, 3, 9, 1, 0], [9, 0, 1, 0, 6, 4, 0, 0, 0], [0, 9, 4, 5, 3, 0, 0, 8, 0], [0, 7, 0, 0, 0, 9, 5, 3, 2], [5, 0, 0, 1, 0, 7, 6, 0, 9], [3, 6, 2, 8, 0, 0, 0, 9, 1], [0, 1, 0, 3, 0, 0, 8, 7, 5], [8, 0, 7, 4, 0, 0, 0, 0, 6]], [[7, 0, 0, 0, 9, 0, 0, 5, 0], [0, 0, 0, 7, 0, 1, 2, 6, 9], [6, 2, 9, 5, 0, 0, 1, 7, 0], [0, 5, 4, 0, 1, 0, 6, 0, 2], [8, 6, 0, 0, 4, 0, 0, 0, 1], [9, 0, 1, 8, 2, 6, 0, 3, 0], [0, 9, 0, 0, 0, 0, 3, 0, 0], [0, 0, 5, 0, 0, 9, 8, 4, 0], [0, 8, 0, 0, 5, 3, 0, 2, 0]], [[8, 0, 3, 0, 7, 6, 0, 4, 5], [0, 0, 1, 2, 4, 5, 3, 8, 9], [0, 0, 2, 0, 0, 9, 1, 0, 0], [0, 8, 6, 0, 2, 0, 0, 3, 4], [3, 0, 0, 6, 1, 0, 5, 2, 7], [0, 7, 5, 9, 3, 4, 6, 1, 8], [0, 3, 8, 0, 0, 1, 4, 9, 2], [5, 1, 7, 4, 9, 0, 8, 6, 3], [9, 0, 4, 0, 6, 0, 7, 0, 0]], [[7, 2, 0, 8, 3, 0, 4, 0, 0], [9, 5, 0, 0, 0, 0, 8, 6, 3], [6, 0, 8, 0, 5, 9, 1, 7, 0], [0, 1, 6, 0, 0, 0, 0, 5, 4], [5, 4, 0, 0, 1, 2, 0, 0, 0], [3, 0, 9, 0, 0, 5, 6, 0, 1], [0, 7, 0, 3, 6, 0, 0, 8, 0], [0, 9, 5, 2, 7, 0, 3, 0, 6], [1, 0, 3, 5, 9, 0, 2, 0, 7]], [[2, 9, 0, 0, 0, 0, 0, 0, 0], [8, 6, 7, 1, 4, 3, 9, 0, 2], [0, 0, 1, 5, 0, 9, 0, 0, 8], [5, 0, 3, 0, 0, 8, 4, 0, 1], [1, 0, 6, 0, 0, 2, 0, 0, 0], [7, 0, 9, 0, 1, 0, 0, 3, 5], [3, 0, 4, 2, 0, 7, 0, 0, 0], [9, 0, 2, 8, 0, 0, 0, 4, 3], [0, 1, 8, 0, 3, 5, 7, 0, 9]], [[0, 6, 9, 0, 0, 3, 0, 1, 0], [0, 0, 0, 1, 0, 8, 7, 9, 0], [0, 2, 0, 0, 0, 7, 3, 0, 0], [0, 1, 8, 7, 0, 0, 0, 3, 4], [2, 9, 7, 3, 0, 0, 5, 8, 0], [0, 4, 0, 8, 0, 5, 2, 7, 0], [0, 7, 0, 6, 0, 0, 4, 0, 8], [0, 0, 6, 5, 8, 0, 1, 0, 7], [4, 0, 0, 0, 7, 0, 9, 0, 0]], [[3, 0, 2, 0, 0, 0, 8, 4, 0], [0, 8, 0, 7, 0, 2, 0, 0, 1], [0, 0, 0, 0, 6, 4, 7, 0, 3], [8, 4, 1, 2, 0, 0, 0, 3, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 8, 0, 0, 0, 0], [0, 6, 8, 0, 0, 7, 0, 5, 0], [0, 3, 0, 0, 0, 0, 0, 8, 0], [4, 1, 0, 0, 2, 0, 0, 7, 0]], [[1, 4, 0, 0, 5, 2, 0, 0, 3], [9, 8, 0, 6, 0, 0, 2, 0, 7], [5, 2, 7, 0, 0, 0, 4, 0, 6], [4, 0, 5, 9, 2, 3, 6, 8, 1], [2, 3, 9, 1, 8, 0, 7, 4, 0], [0, 6, 1, 0, 4, 0, 3, 2, 0], [0, 5, 4, 0, 7, 9, 1, 0, 8], [0, 1, 8, 0, 6, 5, 9, 7, 2], [0, 9, 2, 0, 3, 1, 5, 6, 4]], [[8, 6, 0, 0, 9, 7, 0, 0, 4], [3, 0, 0, 4, 2, 0, 0, 0, 0], [4, 0, 0, 8, 0, 6, 0, 9, 0], [0, 9, 4, 5, 0, 0, 0, 3, 6], [6, 1, 3, 0, 0, 9, 2, 8, 0], [5, 0, 0, 0, 0, 1, 0, 4, 0], [1, 0, 0, 0, 5, 4, 8, 0, 2], [2, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 5, 2, 6, 0, 0, 0, 0]], [[0, 8, 9, 0, 4, 0, 6, 5, 7], [0, 0, 0, 0, 0, 5, 0, 0, 8], [0, 0, 5, 0, 0, 0, 3, 0, 0], [8, 5, 6, 0, 9, 0, 7, 3, 0], [0, 0, 3, 8, 0, 6, 4, 0, 0], [4, 0, 2, 7, 0, 3, 0, 6, 5], [0, 0, 0, 1, 2, 0, 5, 7, 3], [5, 0, 0, 0, 0, 8, 1, 0, 0], [1, 2, 4, 5, 0, 0, 0, 0, 6]], [[0, 0, 6, 0, 0, 0, 0, 2, 0], [5, 1, 2, 8, 0, 0, 9, 7, 0], [3, 9, 7, 1, 5, 0, 8, 0, 0], [7, 5, 9, 4, 0, 1, 0, 8, 0], [2, 4, 1, 3, 0, 8, 5, 9, 7], [6, 0, 8, 5, 0, 9, 4, 0, 2], [9, 0, 0, 0, 0, 0, 0, 3, 8], [8, 0, 3, 2, 9, 5, 0, 4, 0], [1, 0, 4, 7, 0, 3, 0, 5, 9]], [[0, 0, 6, 2, 0, 0, 5, 0, 7], [0, 0, 0, 4, 0, 5, 0, 6, 8], [5, 7, 4, 6, 8, 0, 3, 0, 9], [0, 1, 7, 8, 0, 6, 0, 0, 5], [6, 3, 0, 9, 5, 2, 0, 7, 0], [2, 0, 0, 0, 1, 4, 0, 0, 3], [0, 6, 0, 3, 2, 0, 9, 0, 0], [0, 4, 0, 0, 0, 0, 8, 3, 0], [8, 0, 0, 5, 0, 9, 7, 0, 6]], [[6, 0, 8, 4, 0, 0, 0, 9, 0], [0, 0, 0, 1, 3, 0, 2, 6, 0], [9, 0, 1, 0, 2, 0, 7, 0, 4], [8, 0, 7, 0, 9, 0, 6, 1, 2], [0, 6, 0, 0, 0, 8, 9, 0, 0], [4, 0, 3, 2, 6, 0, 5, 8, 7], [0, 0, 6, 5, 0, 0, 4, 7, 9], [7, 0, 9, 6, 0, 0, 0, 2, 5], [2, 8, 0, 9, 4, 0, 1, 3, 6]], [[3, 6, 0, 1, 2, 0, 0, 8, 0], [7, 4, 8, 3, 0, 0, 0, 5, 0], [0, 2, 5, 7, 4, 8, 6, 0, 0], [0, 5, 0, 0, 8, 7, 9, 0, 4], [0, 8, 7, 0, 0, 3, 0, 0, 6], [0, 9, 0, 6, 5, 0, 0, 0, 2], [0, 0, 4, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 3, 0, 1, 6, 9], [9, 0, 6, 5, 0, 0, 3, 0, 8]], [[7, 0, 0, 2, 9, 1, 0, 3, 0], [9, 0, 1, 6, 0, 0, 0, 0, 0], [0, 6, 0, 8, 7, 5, 0, 1, 2], [0, 0, 4, 0, 8, 7, 2, 0, 5], [0, 0, 7, 5, 0, 0, 0, 4, 0], [2, 5, 0, 1, 0, 0, 8, 7, 0], [0, 0, 2, 9, 1, 6, 0, 0, 4], [0, 9, 6, 4, 0, 0, 5, 2, 0], [0, 4, 8, 0, 0, 0, 1, 0, 9]], [[0, 0, 5, 0, 0, 4, 1, 6, 0], [0, 2, 9, 1, 0, 8, 5, 0, 0], [0, 6, 0, 0, 7, 3, 0, 2, 0], [1, 3, 7, 2, 4, 0, 6, 8, 0], [0, 0, 0, 6, 8, 0, 7, 0, 1], [9, 8, 6, 7, 3, 0, 0, 0, 5], [2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 8, 0, 0], [0, 5, 0, 8, 9, 0, 0, 1, 6]], [[0, 0, 9, 0, 1, 0, 0, 0, 2], [1, 0, 3, 0, 2, 6, 7, 9, 4], [2, 6, 0, 9, 0, 0, 0, 3, 0], [9, 1, 0, 0, 0, 0, 0, 0, 0], [8, 4, 0, 0, 0, 0, 2, 0, 0], [3, 2, 5, 0, 8, 4, 1, 7, 9], [0, 8, 2, 4, 6, 9, 0, 1, 0], [7, 3, 1, 0, 5, 8, 0, 0, 0], [0, 9, 0, 1, 7, 3, 0, 0, 5]], [[0, 5, 0, 2, 1, 0, 9, 7, 0], [1, 2, 4, 7, 0, 6, 0, 5, 3], [9, 7, 6, 5, 0, 3, 1, 0, 0], [0, 4, 1, 0, 5, 0, 2, 3, 0], [2, 3, 8, 0, 0, 0, 0, 6, 9], [5, 0, 9, 0, 0, 0, 0, 0, 1], [0, 0, 5, 0, 0, 0, 0, 1, 7], [0, 0, 0, 9, 3, 5, 4, 0, 0], [0, 8, 2, 0, 6, 0, 3, 9, 0]], [[4, 0, 1, 0, 0, 6, 0, 0, 7], [0, 9, 6, 8, 0, 7, 0, 4, 0], [0, 8, 7, 0, 0, 0, 9, 3, 0], [1, 2, 0, 4, 0, 0, 0, 7, 8], [6, 4, 0, 3, 0, 0, 0, 1, 0], [7, 3, 8, 2, 1, 0, 4, 0, 0], [9, 1, 0, 6, 8, 3, 0, 5, 2], [8, 6, 0, 0, 0, 0, 1, 0, 4], [0, 0, 0, 1, 9, 4, 6, 8, 3]], [[0, 3, 2, 0, 4, 0, 5, 0, 7], [0, 8, 7, 3, 0, 2, 0, 1, 6], [0, 0, 0, 8, 0, 7, 9, 0, 2], [1, 7, 5, 0, 8, 9, 3, 6, 0], [3, 6, 4, 7, 1, 0, 8, 2, 0], [0, 0, 9, 0, 0, 0, 0, 7, 0], [7, 0, 0, 4, 0, 0, 6, 5, 1], [2, 4, 3, 0, 0, 1, 7, 9, 0], [6, 5, 1, 9, 0, 0, 2, 0, 0]], [[1, 5, 0, 0, 0, 8, 0, 0, 0], [6, 7, 2, 0, 0, 0, 0, 4, 3], [3, 0, 8, 7, 6, 2, 9, 5, 0], [4, 9, 1, 8, 7, 0, 0, 0, 5], [0, 2, 6, 9, 0, 1, 3, 8, 7], [0, 8, 3, 0, 5, 6, 0, 0, 4], [0, 1, 4, 0, 2, 0, 5, 0, 0], [9, 0, 5, 1, 0, 4, 0, 3, 2], [2, 3, 0, 0, 9, 0, 0, 1, 8]], [[0, 3, 0, 0, 5, 7, 1, 9, 2], [6, 0, 7, 2, 0, 0, 0, 3, 0], [0, 0, 0, 0, 3, 4, 7, 0, 6], [5, 1, 2, 9, 4, 8, 6, 0, 3], [3, 7, 0, 5, 1, 2, 0, 0, 0], [9, 4, 8, 3, 7, 0, 2, 0, 5], [0, 2, 5, 0, 8, 9, 0, 6, 4], [0, 6, 3, 7, 0, 5, 0, 0, 0], [1, 0, 9, 0, 6, 3, 5, 2, 7]], [[8, 2, 0, 0, 0, 6, 0, 5, 0], [0, 4, 0, 0, 0, 0, 0, 6, 7], [9, 7, 0, 0, 0, 0, 8, 1, 0], [5, 8, 2, 0, 1, 7, 6, 0, 3], [0, 0, 0, 3, 0, 4, 5, 0, 0], [0, 3, 0, 0, 0, 0, 1, 0, 0], [7, 6, 0, 0, 0, 0, 2, 9, 0], [2, 0, 0, 0, 7, 3, 0, 0, 5], [0, 5, 0, 0, 2, 0, 0, 0, 6]], [[3, 5, 0, 0, 4, 0, 7, 0, 0], [0, 4, 0, 9, 7, 0, 5, 0, 0], [8, 7, 0, 1, 5, 0, 0, 0, 2], [1, 0, 4, 0, 8, 0, 3, 5, 9], [0, 3, 0, 0, 2, 0, 8, 0, 6], [0, 0, 0, 0, 3, 9, 0, 4, 0], [7, 9, 0, 0, 1, 0, 0, 0, 0], [5, 0, 0, 0, 6, 4, 9, 0, 0], [4, 0, 8, 0, 0, 0, 1, 0, 5]], [[0, 9, 0, 0, 0, 0, 5, 2, 0], [0, 2, 0, 1, 9, 8, 0, 4, 0], [0, 0, 0, 0, 2, 5, 0, 9, 1], [4, 0, 0, 2, 8, 7, 1, 3, 9], [2, 0, 0, 9, 0, 1, 0, 5, 4], [9, 3, 1, 0, 0, 0, 0, 8, 2], [8, 1, 2, 3, 6, 0, 4, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 3], [0, 6, 9, 5, 0, 4, 0, 0, 0]], [[0, 0, 6, 0, 9, 3, 8, 4, 0], [0, 0, 0, 0, 0, 4, 0, 0, 1], [0, 0, 8, 0, 0, 0, 9, 3, 7], [4, 0, 0, 0, 7, 0, 5, 0, 3], [0, 0, 5, 4, 1, 6, 0, 0, 0], [0, 0, 7, 0, 0, 0, 1, 6, 4], [0, 0, 4, 0, 0, 0, 3, 5, 9], [0, 5, 0, 8, 0, 0, 2, 0, 0], [0, 0, 2, 9, 0, 5, 0, 1, 0]], [[0, 4, 1, 2, 0, 0, 6, 3, 0], [8, 9, 0, 6, 3, 7, 1, 4, 0], [7, 0, 0, 1, 4, 0, 0, 0, 0], [0, 8, 0, 9, 0, 0, 0, 0, 0], [6, 0, 9, 3, 0, 0, 0, 8, 2], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 4, 8, 6, 0], [4, 2, 0, 8, 0, 0, 7, 1, 0], [0, 6, 0, 7, 1, 3, 0, 0, 0]], [[4, 0, 8, 1, 9, 7, 3, 6, 0], [6, 0, 0, 4, 0, 0, 7, 1, 9], [0, 7, 0, 0, 0, 0, 0, 0, 0], [9, 4, 7, 0, 0, 0, 0, 0, 2], [8, 6, 0, 0, 7, 4, 0, 5, 0], [0, 1, 3, 8, 2, 6, 4, 0, 0], [3, 0, 0, 2, 6, 5, 0, 0, 0], [0, 0, 6, 0, 4, 8, 9, 0, 0], [0, 8, 0, 3, 1, 9, 0, 2, 6]], [[0, 0, 0, 0, 6, 0, 1, 0, 0], [0, 7, 8, 0, 0, 0, 9, 0, 0], [0, 4, 1, 9, 0, 0, 0, 0, 6], [7, 0, 5, 3, 0, 0, 6, 0, 2], [4, 1, 0, 0, 2, 0, 0, 0, 7], [2, 0, 6, 5, 7, 0, 0, 0, 4], [9, 6, 7, 4, 8, 5, 2, 0, 1], [8, 5, 4, 0, 1, 0, 7, 6, 9], [1, 0, 0, 7, 9, 6, 0, 5, 8]], [[0, 0, 0, 0, 9, 1, 0, 4, 0], [0, 9, 1, 6, 0, 0, 3, 0, 0], [6, 0, 0, 0, 3, 0, 9, 0, 0], [0, 7, 2, 0, 0, 0, 6, 0, 0], [0, 6, 9, 0, 0, 2, 0, 3, 1], [1, 8, 3, 4, 0, 0, 0, 0, 0], [2, 0, 6, 3, 1, 0, 0, 0, 0], [0, 0, 7, 9, 4, 8, 5, 6, 2], [9, 4, 8, 0, 5, 0, 1, 7, 3]]]


solveBoard = document.querySelector(".solveBoard");
cell = document.querySelectorAll(".cell");
newBoard = document.querySelector(".newBoard");
color = "royalblue";
untouchedColor = "grey";
incorrectColor = "red"
solvedColor = "green";

r1 = document.querySelectorAll(".r1");
r2 = document.querySelectorAll(".r2");
r3 = document.querySelectorAll(".r3");
r4 = document.querySelectorAll(".r4");
r5 = document.querySelectorAll(".r5");
r6 = document.querySelectorAll(".r6");
r7 = document.querySelectorAll(".r7");
r8 = document.querySelectorAll(".r8");
r9 = document.querySelectorAll(".r9");





function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


function printUnsolvedBoard() {
      // r1
    setTimeout(function() {
      for (let i = 0; i < r2.length; i++) {
      r1[i].innerText = board[0][i];
      if (r1[i].innerText === "0") {
        r1[i].style.backgroundColor = color;
      }
      else {
        r1[i].style.backgroundColor = untouchedColor;
      }
      }
    }, 100);

    // r2
    setTimeout(function() {
    for (let i = 0; i < r2.length; i++) {
      r2[i].innerText = board[1][i];
      if (r2[i].innerText === "0") {
        r2[i].style.backgroundColor = color;
      }
      else {
        r2[i].style.backgroundColor = untouchedColor;
      }
    }
    }, 200);

    // r3
    setTimeout(function() {
    for (let i = 0; i < r3.length; i++) {
      r3[i].innerText = board[2][i];
      if (r3[i].innerText === "0") {
        r3[i].style.backgroundColor = color;
      }
      else {
        r3[i].style.backgroundColor = untouchedColor;
      }
    }     
    }, 300);

    // r4
    setTimeout(function() {
    for (let i = 0; i < r4.length; i++) {
      r4[i].innerText = board[3][i];
      if (r4[i].innerText === "0") {
        r4[i].style.backgroundColor = color;
      }
      else {
        r4[i].style.backgroundColor = untouchedColor;
      }
    }
    }, 400);

    // r5
    setTimeout(function() {
    for (let i = 0; i < r5.length; i++) {
      r5[i].innerText = board[4][i];
      if (r5[i].innerText === "0") {
        r5[i].style.backgroundColor = color;
      }
      else {
        r5[i].style.backgroundColor = untouchedColor;
      }
    }
    }, 500);

    // r6
    setTimeout(function() {
    for (let i = 0; i < r6.length; i++) {
      r6[i].innerText = board[5][i];
      if (r6[i].innerText === "0") {
        r6[i].style.backgroundColor = color;
      }
      else {
        r6[i].style.backgroundColor = untouchedColor;
      }
    }   
    }, 600);


    // r7
    setTimeout(function() {
    for (let i = 0; i < r7.length; i++) {
      r7[i].innerText = board[6][i];
      if (r7[i].innerText === "0") {
        r7[i].style.backgroundColor = color;
      }
      else {
        r7[i].style.backgroundColor = untouchedColor;
      }
    }
    }, 700);


    // r8
    setTimeout(function() {
    for (let i = 0; i < r8.length; i++) {
      r8[i].innerText = board[7][i];
      if (r8[i].innerText === "0") {
        r8[i].style.backgroundColor = color;
      }
      else {
        r8[i].style.backgroundColor = untouchedColor;
      }
    }
    }, 800);


    // r9
    setTimeout(function() {
    for (let i = 0; i < r9.length; i++) {
      r9[i].innerText = board[8][i];
      if (r9[i].innerText === "0") {
        r9[i].style.backgroundColor = color;
      }
      else {
        r9[i].style.backgroundColor = untouchedColor;
      }
    }    
    }, 900);       
};

function printSolvedBoard() {
    // r1
    setTimeout(function() {
      for (let i = 0; i < r1.length; i++) {
        // == is super important! I think we might be comparing a string to a number, but we don't care about data types (hence, we do not use ===)
        if (r1[i].style.backgroundColor !== untouchedColor && r1[i].innerText == board[0][i]) {
          r1[i].style.backgroundColor = solvedColor;
        }
        else if (r1[i].style.backgroundColor !== untouchedColor && r1[i].innerText != board[0][i]) {
          r1[i].innerText = board[0][i];
          r1[i].style.backgroundColor = incorrectColor;
        }
        else {
          r1[i].innerText = board[0][i];
        }
      }
    }, 100);

    // r2
    // don't change r1.length to r2.length!
    setTimeout(function() {
      for (let i = 0; i < r2.length; i++) {
        if (r2[i].style.backgroundColor !== untouchedColor && r2[i].innerText == board[1][i]) {
          r2[i].style.backgroundColor = solvedColor;
        }
        else if (r2[i].style.backgroundColor !== untouchedColor && r2[i].innerText != board[1][i]) {
          r2[i].innerText = board[1][i];
          r2[i].style.backgroundColor = incorrectColor;
        }
        else {
          r2[i].innerText = board[1][i];
        }
      }
    }, 200);

    // r3
    setTimeout(function() {
      for (let i = 0; i < r3.length; i++) {
        if (r3[i].style.backgroundColor !== untouchedColor && r3[i].innerText == board[2][i]) {
          r3[i].style.backgroundColor = solvedColor;
        }
        else if (r3[i].style.backgroundColor !== untouchedColor && r3[i].innerText != board[2][i]) {
          r3[i].innerText = board[2][i];
          r3[i].style.backgroundColor = incorrectColor;
        }
        else {
          r3[i].innerText = board[2][i];
        }
      }
    }, 300);

    // r4
    setTimeout(function() {
      for (let i = 0; i < r4.length; i++) {
        if (r4[i].style.backgroundColor !== untouchedColor && r4[i].innerText == board[3][i]) {
          r4[i].style.backgroundColor = solvedColor;
        }
        else if (r4[i].style.backgroundColor !== untouchedColor && r4[i].innerText != board[3][i]) {
          r4[i].innerText = board[3][i];
          r4[i].style.backgroundColor = incorrectColor;
        }
        else {
          r4[i].innerText = board[3][i];
        }
      }
    }, 400);

    // r5
    setTimeout(function() {
      for (let i = 0; i < r5.length; i++) {
        if (r5[i].style.backgroundColor !== untouchedColor && r5[i].innerText == board[4][i]) {
          r5[i].innerText = board[4][i];
          r5[i].style.backgroundColor = solvedColor;
        }
        else if (r5[i].style.backgroundColor !== untouchedColor && r5[i].innerText != board[4][i]) {
            r5[i].innerText = board[4][i];
            r5[i].style.backgroundColor = incorrectColor;
        }
        else {
          r5[i].innerText = board[4][i];
        }
      }
    }, 500);

    // r6
    setTimeout(function() {
      for (let i = 0; i < r6.length; i++) {
        if (r6[i].style.backgroundColor !== untouchedColor && r6[i].innerText == board[5][i]) {
          r6[i].style.backgroundColor = solvedColor;
        }
        else if (r6[i].style.backgroundColor !== untouchedColor && r6[i].innerText != board[5][i]) {
          r6[i].innerText = board[5][i];
          r6[i].style.backgroundColor = incorrectColor;
        }
        else {
          r6[i].innerText = board[5][i];
        }
      }
    }, 600);


    // r7
    setTimeout(function() {
      for (let i = 0; i < r7.length; i++) {
        if (r7[i].style.backgroundColor !== untouchedColor && r7[i].innerText == board[6][i]) {
          r7[i].style.backgroundColor = solvedColor;
        }
        else if (r7[i].style.backgroundColor !== untouchedColor && r7[i].innerText != board[6][i]) {
          r7[i].innerText = board[6][i];
          r7[i].style.backgroundColor = incorrectColor;
        }
        else {
          r7[i].innerText = board[6][i];
        }
      }
    }, 700);


    // r8
    setTimeout(function() {
      for (let i = 0; i < r8.length; i++) {
        if (r8[i].style.backgroundColor !== untouchedColor && r8[i].innerText == board[7][i]) {
          r8[i].style.backgroundColor = solvedColor;
        }
        else if (r8[i].style.backgroundColor !== untouchedColor && r8[i].innerText != board[7][i]) {
          r8[i].innerText = board[7][i];
          r8[i].style.backgroundColor = incorrectColor;
        }
        else {
          r8[i].innerText = board[7][i];
        }
      }
    }, 800);


    // r9
    setTimeout(function() {
      for (let i = 0; i < r9.length; i++) {
        if (r9[i].style.backgroundColor !== untouchedColor && r9[i].innerText == board[8][i]) {
          r9[i].style.backgroundColor = solvedColor;
        }
        else if (r9[i].style.backgroundColor !== untouchedColor && r9[i].innerText != board[8][i]) {
          r9[i].innerText = board[8][i];
          r9[i].style.backgroundColor = incorrectColor;
        }
        else {
          r9[i].innerText = board[8][i];
        }
      }
    }, 900);     
};


board = []
newBoard.addEventListener('click', () => {
  boardNumber = randomInteger(0, 99)
  board = hundredBoards[boardNumber]
  printUnsolvedBoard();
})


// boardCopy = board;
// This can't affect the actual board -- we'll just make a copy! The boardCopy will keep track of the user's move,
// the original board will be used to print the correct answer. 
for (let i = 0; i < cell.length; i++) {
  cell[i].addEventListener('click', () => {
  if (cell[i].style.backgroundColor === color) {
    if (cell[i].innerText !== "9") {
        cell[i].innerText = parseFloat(cell[i].innerText) + 1;
        rowNumber = Math.floor(i / (9))
        // boardCopy[rowNumber][(i) % 9] = parseFloat(cell[i].innerText);
        console.log(board)
    }
    else {
        cell[i].innerText = "1";
  }
  }
}
)};


// unsolvedBoard = board
solveBoard.addEventListener('click', () => {
    setTimeout(function() {
    answer = solveSudoku(board)
    console.log(answer);
    printSolvedBoard()
    // for (let i = 0; i < cell.length; i++) {
    //   // https://www.w3schools.com/jsref/prop_style_backgroundcolor.asp
    //     if (cell[i].style.backgroundColor == color) {
    //       // javascript backgroundcolor removes css hover
    //         /* https://stackoverflow.com/questions/40734464/javascript-backgroundcolor-does-remove-css-hover */
    //       cell[i].style.backgroundColor = solvedColor;
    //     }
    //   }
    // }, 250);
    // for (let i = 0; i < r1.length; i++) {
    //   r1[i].innerText = board[0][i];
    // }
    })




















// ########################################################################
// Do not edit below 
function solveSudoku(board) {
  solvePartialSudoku(0, 0, board);
  return board;
}

function solvePartialSudoku(row, col, board) {
  let currentRow = row;
  let currentCol = col;

  if (currentCol === board[currentRow].length) {
    currentRow++
    currentCol = 0;
    if (currentRow === board.length) return true
  }


  if (board[currentRow][currentCol] === 0) {
    return tryDigitsAtPosition(currentRow, currentCol, board);
  }

  return solvePartialSudoku(currentRow, currentCol + 1, board);
}

function tryDigitsAtPosition(row, col, board) {
    for (let digit = 1; digit < 10; digit++) {
        if (isValidAtPosition(digit, row, col, board)) {
        board[row][col] = digit;
          if (solvePartialSudoku(row, col + 1, board)) return true;
        }
      }

  board[row][col] = 0;
    return false
}

function isValidAtPosition(value, row, col, board) {
  const rowIsValid = !board[row].includes(value);
  const colIsValid = !board.map(r => r[col]).includes(value);

  if (!rowIsValid || !colIsValid) return false;

  // Check
  const subgridRowStart = Math.floor(row / 3) * 3;
  const subgridColStart = Math.floor(col / 3) * 3;
  for (let rowIdx = 0; rowIdx < 3; rowIdx++) {
    for (let colIdx = 0; colIdx < 3; colIdx++) {
      const rowToCheck = subgridRowStart + rowIdx;
      const colToCheck = subgridColStart + colIdx;
      const existingValue = board[rowToCheck][colToCheck];

      if (existingValue === value) return false;
    }
  }

  return true
}
})